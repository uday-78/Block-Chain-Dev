
--> The title is one of several elements that provide extra information 
not visible on the web page, but it is useful for search engines or how the page gets displayed.

 charset set to the value utf-8 to tell the browser how to encode characters for the page


 --> To star taking control of the content and appearance we will use the style tag to do that

 --> You can add style to an element by specifying it in the 
 style element and setting a property for it like this:

          element {
        property: value;
        }

   Here if in place of element we directly write the element name then that is 
   known as type selector     

  --> If we have same elements with the same styling like below:

    h1 {
        text-align: center;
      }
      h2 {
        text-align: center;
      }
      p {
        text-align: center;
      }


    Then they all can be written in a single line by separating the element name by comma as below

    h1,h2,p{
        text-align:center
    }   

--> Need for the creation of the css file separately : Here in the html document we can apply styling to the
    element under the style tag itself but since there will not be any 1 or 2 styling there will be a lot
    So it is advisable to create a separate css file for that and then link that css file with the html file
    by following way:

    <link rel="stylesheet" href="styles.css">

    here "rel" attribute is meant to describe the relationship between the linked resource
     and the current document (webpage).

     Some commonly used values for rel include:

    "stylesheet": This value tells the browser that the linked resource is a style sheet, which is used to define how the webpage should look.

    "icon": This value is used to link to a small image, often representing a website's favicon (the tiny icon you see in browser tabs).

    "preload": It indicates that the linked resource should be preloaded, which can help improve webpage loading speed.

    "author": This value is used in links to profiles or information about the author of the webpage.

    --> To apply the entire styling for a element use the name of that element followed by curly braces and then
        write the property

    --> The div element is used mainly for design layout purposes 

    And if we dont't want the div to take the entire width then we can use the width property and the specify the value like below:

     div{
        width:300px
     }     

     In CSS comment are added by /* */


  --> While giving the styling of the element in css we can give either by px or % but there is a difference between them:

      Percentage (%):

    ——> Percentage units are relative to the parent element's size or the containing element's size.

   ——> When you specify an element's size as a percentage, it means that the size is a portion or
          fraction of the size of its parent or containing element.

  ——> Percentages are particularly useful for creating responsive layouts because they adapt to changes in screen size and parent element size 

     
     Pixel (px):

    👁👁 👀👀 Pixel units are fixed units and represent a specific number of screen pixels.
    👁👁 👀👀 When you specify an element's size in pixels, it will always have the same size regardless of its parent or containing element.
    👁👁 👀👀 Pixels are commonly used for setting precise dimensions and fine-tuning elements' sizes and positions.  


    Key Differences:

     👀👀  % units are relative, while px units are absolute.
     👀👀  % units are responsive and adapt to changes in the parent or viewport size, making them suitable for responsive design.
     👀👀  px units provide exact control over element sizes but may not adapt well to different screen sizes and devices.
     👀👀  In most cases, using % units for layout and responsiveness and px units for fine-grained control is a common practice in CSS.

    Here's a basic guideline:

     👀👀  Use % for layout and sizing when you want elements to adapt to their containers.
     👀👀  Use px for precise control over dimensions and when you need consistent sizing regardless of the container.


 --> A class selector is defined by a name with a dot directly in front of it, like this:

                    .class-name {
                     styles
                    }

  --> To add a background image in css follow the below way:

       background-image: url("place url here")

   --> article elements commonly contain multiple elements that have related information


   --> Styling the p elements as inline-block and placing them on separate lines in the code creates 
   an extra space to the right of the first p element, causing the second one to shift to the next line.
    One way to fix this is to make each p element's width a little less than 50%   

  --> You can add a fallback value for the font-family by adding another font name separated by a comma. 
  Fallbacks are used in instances where the initial is not found/available    

  The default properties of an hr element will make it appear as a thin light grey line. 
  You can change the height of the line by specifying a value for the height property.   


  --> The default color of a link that has not yet been clicked on is typically blue.
   The default color of a link that has already been visited from a page is typically purple.         


 --> The type selector for anchor tag is "a"

--> A pseudo-class is used to define a special state of an element.

    For example, it can be used to:

     👀👀Style an element when a user mouses over it
     👀👀Style visited and unvisited links differently
     👀👀Style an element when it gets focus


  --> img elements are "like" inline elements.

  -->To make the inline element to block element we can use the display property and give the value block or inline


 -->  The h2 elements have default top and bottom margin space, so you could change the bottom margin of the h2 elements to say 0 or another number.

   There is an easier way, simply add a negative top margin to the img elements to pull them up from their current positions.
    Negative values are created using a - in front of the value.    


************* Adding new Information here ************************************

-->  To link the external css style sheet we have to link the css files to html and in the href attribute we
     can place the absolute path or the relative path.

 But we can use both thee ways but giving the relative path is considered as good practice 

 Now we will understand what is relative and absolute path :

 The key difference between them is how they specify the location of the resource

 1. Absolute path: It is like giving the full address to a place including the street name, city, and country.
    
For web resources (like images or CSS files), it's like providing the full web address, including "https://" or "http://," such as "https://www.example.com/images/pic.jpg."
For local files, it's like giving the entire file path from the very beginning, like starting from the "C:" drive on a Windows computer or the root directory ("/") on a Unix-based system.

2. Relative Path: Relative paths are like giving directions to a place from your current location, like saying, "Go two blocks to the right and then one block up."

They specify the location of a resource based on where your current HTML or CSS file is located.
For example, if your current HTML file is in the same folder as an image, you can simply say "image.jpg" to refer to it because you're already in the same place. 


 Choosing Between Absolute and Relative Paths:

    Use Absolute Paths When:
        Linking to external resources on the internet.
        Ensuring an exact, fixed location is always used.
        Referencing resources from different domains.

    Use Relative Paths When:
        Working within a project's directory structure.
        Referencing resources within the same domain.
        Wanting to create more portable and maintainable code.

  -->    It is advisable to place the link element for linking the css inside the head tag because:
         The reason is that the <head> section of an HTML document is specifically reserved for metadata, external resources,
         and references 👀that should be loaded before the content in the <body>👀 CSS stylesheets, 
         being a critical part of styling your web page, should be included in the <head>

  --> We can use many css files in our html page as needed because this can help us to adapt to various
       situation in developing the web page  

    Ex: Suppose if we want to implement the dark mode in website so to do that we can use the two css file
        where the first CSS file will serve as a base design for the website when there will not be any dark
        mode and the second one will be responsible when we will switch to the dark mode

    !! But if we have used the two css file that is main.css and override.css then in that case  any styles defined in "main.css" 
    for elements or classes that are also targeted by selectors in "override.css" will be overridden,
     and the styles from "override.css" will be applied instead. 


 --> When someone first visits your website, their browser downloads the HTML of the current page plus the linked CSS
file. Then when they navigate to another page, their browser only needs to download the HTML of that page; the
CSS file is cached, so it does not need to be downloaded again. Since browsers cache the external stylesheet, your
pages load faster.   


-->We can also import other css file with the help of "@import" in following way:

 1. With internal style tag
<style>
@import url('/css/styles.css');
</style>

 2. With external styleheet

 a. If we want to import the cs file which is in the root directory we can use
    @import filename.css

 Or if it is in another folder in the root directory then we can use
   @import folder name/filename.css

 b. Importing external CSS is also possible. A common use case are font files.
     @import 'https://fonts.googleapis.com/css?family=Lato'  


 3. We can also tell the browser to use a certain css file in a given situation by:

     @import '/print-styles.css' print;

   The above tells that use the print-styles.css file when we are printing the web page

   @import url('landscape.css') screen and (orientation:landscape);

   The above can be used when the orientation of the screen are in landscape mode

--> We can use the inline styles to apply the styling to a specific element but using this is A
    not good practice because it can cause the issue of maintainability in the code

     <h1 style="color: green; text-decoration: underline;">Hello world!</h1>  




